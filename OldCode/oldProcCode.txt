// Group 5
// 18/01/2023
// This code is used to control the hardware of the burglar alarm system. It manages checking the PIR and magnetic sensors to check if movement
// has been detected or if a gate/door/window has been opened. This code also manages turning the buzzer and solenoid
// on if a sensor has been triggered or if the user does not disable the alarm within a set time.
// The arduino also manages the LED's that indicate the state of the alarm (nothing detected, sensor triggered, or alarm sounding)
// The code communicates with python via serial so the user can enter a pin that is used to activate the alarm or change the pin.

#include <Arduino.h>

// defining all pins
#define redLED 47
#define orangeLED 45
#define greenLED 43
#define SOLENOID 9
#define BUZZER 8
#define BUTTON 13
#define PIRSensor 3
#define MagneticSensor 0
// defining tones that indicate the buzzer state
#define BuzzerStandbyTone 1000
#define BuzzerTone 2000

String incoming;         // Incoming string
int start;               // Start of timer
int endTimer;            // end of timer
int passwordTime = 5000; // Maximum ms for entering pin
void handshake();        // function to verify arduino has communication with python
void clearincoming();    // clear the string thats hold previous data from python
void serialRead();       // reads string from python
void awaitserial();      // function that loops until data from python is recieved
void changePin();        // function that allows the user to change the systems pin requiring they have entered the previous
                         // pin and is recognised by the facial recognition
void runAlarm();         // this function activates the buzzer, the red LED, and the solenoid for 20 minutes or until the
                         // correct pin is entered
void activatePolling();  // This function is used to make sure the user enters the correct pin in under the time limit
void polling();          // This function is used to read the sensors and check to see if their state has changed
int deactivateAlarm();   // This function is used to check the pin to see if the user has entered the correct pin to deactivate the alarm
void setLED(int state);  // This function checks the state that the alarm is in and illuminates the relevant LED to indicate the state
void clearBuffer();      // this function function clears the serial buffer

bool timerActive = false; // the timer has not activated yet silly, this one is quite self explanatory

void setup()
{
  // put your setup code here, to run once: - Arduino
  // do not run it more than once, please :) - Alex

  Serial.begin(9600); // Begin Serial
  handshake();        // Run handshake function to allow python to detect Arduino

  // setting the pins to inputs and outputs as required
  pinMode(redLED, OUTPUT);
  pinMode(orangeLED, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(SOLENOID, OUTPUT);
  pinMode(BUZZER, OUTPUT);

  pinMode(BUTTON, INPUT_PULLUP); // pullup to increase resistance as we dont have a 10 Kohm resistor :(
  pinMode(PIRSensor, INPUT);
  // we have not set the magnetic sensor here as it is analogue (I spell this word correctly Arduino, sort it out please)
  setLED(3); // we set the LED indicator to green as the system is not yet triggered
}

void setLED(int state)
{
  // turn all the LEDS off now to avoid repeating code (optimisation is kinda cool :P )
  digitalWrite(redLED, 0);
  digitalWrite(greenLED, 0);
  digitalWrite(orangeLED, 0);
  // using IF statements to only turn on the relevant LED
  if (state == 1)
  {
    digitalWrite(redLED, 1);
  }
  else if (state == 2)
  {
    digitalWrite(orangeLED, 1);
  }
  else if (state == 3)
  {
    digitalWrite(greenLED, 1);
  }
}

void changePin()
{
  bool complete = false; // Loop conditional
  Serial.println("FR");  // Activate Facial Recognition - "FR CONFIRM" is deprecated
  while (!complete)
  {
    clearincoming();
    awaitserial();
    serialRead();

    if (incoming == "Y")
    {
      Serial.println("Y CONFIRM");    // Confirm that a recognised face has been detected
      Serial.println("PIN REQUIRED"); // Request Pin Confirmation
    }

    else if (incoming == "N")
    {
      Serial.println("N CONFIRM"); // Confirm that a recognised face has not been detected
      Serial.println("AM");        // Return to main menu
      complete = true;             // Terminate loop
    }

    else if (incoming == "INCORRECT")
    {
      Serial.println("ATTEMPTS COMPLETE"); // If pin is incorrect only one attempt is given on pin change
      Serial.println("AM");                // Return to main menu
      complete = true;                     // Terminate loop
    }

    else if (incoming == "CORRECT")
    {
      Serial.println("CORRECT CONFIRM"); // Confirm that pin is correct
      Serial.println("CP");              // Request pin change function in python - "CP CONFIRM" is deprecated
      Serial.println("AM");              // Afterwards return to main menu - "AM CONFIRM" is deprecated
      complete = true;
    }
  }
}

int deactivateAlarm()
{
  bool complete = false;          // Loop conditional
  Serial.println("PIN REQUIRED"); // Request Pin Entry
  while (incoming != "PIN REQ CONF")
  {
    clearincoming();
    awaitserial();
    serialRead(); // I like weetabix
                  // arduino prefers bytesize weetabix
                  // (serial sounds like cereal) :)
                  // commenting can be boring if you didnt realise
  }

  int local_start = millis(); // Start the timer
  int attempts = 1;           // Attempts counter
  int local_end = 0;
  while (!complete)
  {

    local_end = millis(); // Get current clock cycle
    if ((local_end - local_start) >= passwordTime)
    {                 // Check if maximum password entry time has elapsed
      noTone(BUZZER); // buzzer goes quiet as it shouldn't be on
      setLED(1);
      digitalWrite(SOLENOID, 0); // extending the solenoid
      tone(BUZZER, BuzzerTone);  // buzzer makes noise and annoys me
      timerActive = true;
      start = millis(); // get the time the buzzer turns on
      awaitserial();
      clearincoming();
      serialRead();
      Serial.println("OUT OF TIME"); // Tell python that maximum time was exceeded
      return 0;                      // Return 0 to confirm incorrect pin entry
      complete = true;               // Terminate loop
      break;
    }
    clearincoming();
    serialRead();
    if (incoming == "INCORRECT")
    {
      if (attempts >= 3)
      {                                      // Check if maximum number of attempts has been exceeded
        Serial.println("ATTEMPTS COMPLETE"); // Tell python that max attempts has been exceeded
        complete = true;
        return 0; // Return 0 to confirm incorrect pin entry
      }
      else
      {
        Serial.println("TIMER RESET"); // If neither above are true reset the timer and allow for another attempt
        local_start = millis();        // Reset the timer
      }
      attempts++; // Add one to the number of user attempts
    }
    else if (incoming == "CORRECT")
    {                                    // If user has entered the correct pin
      Serial.println("CORRECT CONFIRM"); // If above not true confirm the pin was entered correctly
      complete = true;
      return 1; // Return 1 to confirm correct pin entry
    }
  }
}

void polling()
{
  bool awaiting = true;
  bool pythonReady = false;
  while (awaiting)
  {
    while (!pythonReady)
    { // making sure the arduino is communicating with python before checking sensors
      clearincoming();
      awaitserial();
      serialRead();
      if (incoming == "PO CONFIRM")
      {
        start = millis();
        pythonReady = true;
      }
    }
    endTimer = millis();
    int elapsedTime = endTimer - start;
    if (elapsedTime > 5000)
    { // waiting 5 seconds before checking the sensors
      awaiting = false;
    }
  }
  bool sensing = true;

  while (sensing)
  {
    if (digitalRead(PIRSensor))
    { // checking if movement has been detected
      Serial.println("PIR TRIGGERED");
      clearincoming();
      awaitserial();
      serialRead();
      sensing = false;
    }

    else if (analogRead(MagneticSensor) > 50)
    { // checking if the magnetic sensor has been opened
      Serial.println("DOOR TRIGGERED");
      clearincoming();
      awaitserial();
      serialRead();
      sensing = false;
    }
  }
  // TO ATTEMPT DEACTIVATION OR PROCEED TO ALARM TRIGGER
  // WILL PROCEED TO ALARM TRIGGER AFTER 30 SECONDS OF NO PIN ENTRY REGARDLESS OF USER INPUT
  tone(BUZZER, BuzzerStandbyTone);
  setLED(2);
  int pinEntry = deactivateAlarm();
  if (pinEntry)
  {
    noTone(BUZZER);
    setLED(3);            // set LED to green
    Serial.println("PD"); // python is told polling deactivated
    Serial.println("AM"); // activate menu in python
  }
  else
  {
    Serial.println("AA"); // tell pyhton the alarm is activated
    noTone(BUZZER);       // turn the buzzer off so the alarm tone can be run
    runAlarm();
  }
}

void runAlarm()
{
  bool awaiting = true;
  while (awaiting)
  {
    clearincoming();
    awaitserial();
    serialRead();
    if (incoming == "AA CONFIRM")
    {
      awaiting = false; // python has responded to the alarm being activated
    }
  }
  tone(BUZZER, BuzzerTone);  // activate the buzzer in alarm mode
  setLED(1);                 // turn the red LED on
  digitalWrite(SOLENOID, 0); // lock the door using the solenoid
  bool alarmRunning = true;
  if (!timerActive)
  {
    start = millis();
    timerActive = true;
  }
  while (alarmRunning)
  {
    endTimer = millis();
    if ((endTimer - start) < 20 * 1000)
    { // total time the alarm should run for (20 seconds for testing)
      if (!digitalRead(BUTTON))
      { // if the user presses the button
        int pinEntry = deactivateAlarm();
        if (pinEntry == 1)
        {
          noTone(BUZZER);
          setLED(3);            // green LED on
          Serial.println("AD"); // tell python alarm disabled
          Serial.println("AM"); // tell python to activate the menu
          timerActive = false;
          alarmRunning = false;
        }
      }
    }
    else
    {
      noTone(BUZZER);
      setLED(3); // green LED on
      // python communication to deactivate the alarm and activate the menu
      Serial.println("AD");
      Serial.println("AM");
      alarmRunning = false;
      timerActive = false;
    }
  }
}

void activatePolling()
{
  bool complete = false;          // Loop conditional
  Serial.println("PIN REQUIRED"); // Request Pin Entry
  start = millis();               // Start the timer
  int attempts = 1;               // Attempts counter
  while (!complete)
  {
    clearincoming();
    awaitserial();
    serialRead();

    if (incoming == "INCORRECT")
    {
      endTimer = millis(); // Get current clock cycle
      if ((endTimer - start) >= passwordTime)
      {                                // Check if maximum password entry time has elapsed
        Serial.println("OUT OF TIME"); // Tell python that maximum time was exceeded
        Serial.println("AM");          // Return to menu
        complete = true;               // Terminate loop
      }
      else if (attempts >= 3)
      {                                      // Check if maximum number of attempts has been exceeded
        Serial.println("ATTEMPTS COMPLETE"); // Tell python that max attempts has been exceeded
        Serial.println("AM");                // Return to menu
        complete = true;                     // Terminate loop
      }
      else
      {
        Serial.println("TIMER RESET"); // If neither above are true reset the timer and allow for another attempt
        start = millis();              // Reset the timer
      }
      attempts++; // Add one to the number of user attempts
    }
    else if (incoming == "CORRECT")
    {                      // If user has entered the correct pin
      endTimer = millis(); // get current time
      if ((endTimer - start) >= passwordTime)
      {                                // Check if user entered pin within max time
        Serial.println("OUT OF TIME"); // If not, tell python maximum time was exceeded
        Serial.println("AM");          // Return to menu
        complete = true;               // Terminate loop
      }
      else
      {
        Serial.println("CORRECT CONFIRM"); // If above not true confirm the pin was entered correctly
        Serial.println("PO");              // Activate alarm polling mode
        polling();
        complete = true; // Terminate loop
      }
    }
  }
}

void loop()
{
  digitalWrite(SOLENOID, 1);
  setLED(3);
  // put your main code here, to run repeatedly:
  // okay :) - Alex
  clearincoming();
  awaitserial();
  serialRead();

  if (incoming == "COMPLETE")
  {
    Serial.println("COMPLETE CONFIRM");
    Serial.println("AM"); // Activate the menu in python
  }

  // options in the python menu

  else if (incoming == "1")
  {
    Serial.println("1 CONFIRM");
    changePin();
  }

  else if (incoming == "2")
  {
    Serial.println("2 CONFIRM");
    activatePolling();
  }
}
